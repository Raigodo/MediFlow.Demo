// <auto-generated />
using System;
using MediFlow.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MediFlow.Api.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250220090815_Main")]
    partial class Main
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MediFlow.Api.Entities.Clients.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Invalidity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvalidityExpiresOn")
                        .HasColumnType("text");

                    b.Property<string>("InvalidityFlag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("JoinedOn")
                        .HasColumnType("date");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StructureId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StructureId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Clients.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientContacts");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("AssignedOn")
                        .HasColumnType("date");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("StructureId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("UnassignedOn")
                        .HasColumnType("date");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StructureId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Employees.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("StructureId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StructureId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Journal.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateOnly>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Journal.NoteFile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("NoteId");

                    b.ToTable("NoteFiles");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Structures.DeviceKey", b =>
                {
                    b.Property<Guid>("StructureId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("KeyUpdatedOn")
                        .HasColumnType("date");

                    b.Property<Guid>("KeyValue")
                        .HasColumnType("uuid");

                    b.HasKey("StructureId");

                    b.ToTable("StructureDeviceKeys");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Structures.Structure", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Structures.StructureManager", b =>
                {
                    b.Property<Guid>("StructureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid");

                    b.HasKey("StructureId");

                    b.HasIndex("ManagerId");

                    b.ToTable("StructureManagers");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Users.LastSession", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StructureId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("StructureId");

                    b.ToTable("LastSessions");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30007b30-bdf0-4e7d-bac3-2bfca69a8c4f"),
                            Email = "mediflow.noreply@gmail.com",
                            Name = "Admin",
                            PasswordHash = "$2a$11$XBJDRZO3cIpRhoFYi.wGieOF9gRcf1FbzyFpwDf9rbAyomQmma.ya",
                            RefreshToken = new Guid("ea6aea58-b934-48a6-982c-d777145aa077"),
                            Role = 100,
                            Surname = "First"
                        });
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Users.UserAvatar", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserAvatars");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Clients.Client", b =>
                {
                    b.HasOne("MediFlow.Api.Entities.Structures.Structure", "Structure")
                        .WithMany("Clients")
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Clients.Contact", b =>
                {
                    b.HasOne("MediFlow.Api.Entities.Clients.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Employees.Employee", b =>
                {
                    b.HasOne("MediFlow.Api.Entities.Structures.Structure", "Structure")
                        .WithMany("Employees")
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFlow.Api.Entities.Users.User", "User")
                        .WithMany("Employments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Structure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Employees.Invitation", b =>
                {
                    b.HasOne("MediFlow.Api.Entities.Structures.Structure", "Structure")
                        .WithMany()
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Journal.Note", b =>
                {
                    b.HasOne("MediFlow.Api.Entities.Clients.Client", "Client")
                        .WithMany("JournalNotes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFlow.Api.Entities.Employees.Employee", "Creator")
                        .WithMany("CreatedNotes")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Journal.NoteFile", b =>
                {
                    b.HasOne("MediFlow.Api.Entities.Employees.Employee", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("MediFlow.Api.Entities.Journal.Note", "Note")
                        .WithMany("AttachedFiles")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Structures.DeviceKey", b =>
                {
                    b.HasOne("MediFlow.Api.Entities.Structures.Structure", "Structure")
                        .WithOne("DeviceKey")
                        .HasForeignKey("MediFlow.Api.Entities.Structures.DeviceKey", "StructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Structures.Structure", b =>
                {
                    b.HasOne("MediFlow.Api.Entities.Users.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Structures.StructureManager", b =>
                {
                    b.HasOne("MediFlow.Api.Entities.Users.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediFlow.Api.Entities.Structures.Structure", "Structure")
                        .WithOne()
                        .HasForeignKey("MediFlow.Api.Entities.Structures.StructureManager", "StructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Users.LastSession", b =>
                {
                    b.HasOne("MediFlow.Api.Entities.Structures.Structure", "Structure")
                        .WithMany()
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediFlow.Api.Entities.Users.User", "User")
                        .WithOne("LastSession")
                        .HasForeignKey("MediFlow.Api.Entities.Users.LastSession", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Structure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Users.UserAvatar", b =>
                {
                    b.HasOne("MediFlow.Api.Entities.Users.User", "User")
                        .WithOne("Avatar")
                        .HasForeignKey("MediFlow.Api.Entities.Users.UserAvatar", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Clients.Client", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("JournalNotes");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Employees.Employee", b =>
                {
                    b.Navigation("CreatedNotes");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Journal.Note", b =>
                {
                    b.Navigation("AttachedFiles");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Structures.Structure", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("DeviceKey");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MediFlow.Api.Entities.Users.User", b =>
                {
                    b.Navigation("Avatar");

                    b.Navigation("Employments");

                    b.Navigation("LastSession");
                });
#pragma warning restore 612, 618
        }
    }
}
